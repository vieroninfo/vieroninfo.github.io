#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/style.css" />


#+begin_export html
<div class="lang">
<li><a href="bhyve.html">en</a>&nbsp;</li>
<li> | <a href="/it/FreeBSD/bhyve.html">it</a></li>
</div>
#+end_export

#+begin_export html
<nav class="crumbs">
  <ol>
    <li class="crumb"><a href="/index.html">Home</a></li>
    <li class="crumb">FreeBSD as a Host with bhyve</li>
  </ol>
</nav>
#+end_export


#+TITLE: FreeBSD as a Host with bhyve
#+OPTIONS: title:nil
#+AUTHOR: https://vieron.info
# Disable super/subscripting 
#+OPTIONS: ^:nil
#+OPTIONS: toc:nil


@@html:<h1 style="text-align: center;">@@FreeBSD as a Host with bhyve@@html:</h1>@@
@@html:<h3 style="text-align: center;">@@WARNING: the following are my personal notes. Use at your own risk!@@html:</h3>@@


** Prepare the Host


[[https://docs.freebsd.org/en/books/handbook/virtualization/#virtualization-host-bhyve][23.6. FreeBSD as a Host with bhyve]]


*** 1. Check processor support for bhyve module
Check if the processor supports bhyve is to run dmesg or look in /var/run/dmesg.boot for the POPCNT processor feature flag on the Features2 line for AMD速 processors or EPT and UG on the VT-x line for Intel速 processors.

#+begin_example
root@freebsd:~ # dmesg | egrep 'EPT|UG' --color
  VT-x: PAT,HLT,MTF,PAUSE,EPT,UG,VPID
  VT-x: PAT,HLT,MTF,PAUSE,EPT,UG,VPID
  VT-x: PAT,HLT,MTF,PAUSE,EPT,UG,VPID
  VT-x: PAT,HLT,MTF,PAUSE,EPT,UG,VPID
  VT-x: PAT,HLT,MTF,PAUSE,EPT,UG,VPID
  VT-x: PAT,HLT,MTF,PAUSE,EPT,UG,VPID
  VT-x: PAT,HLT,MTF,PAUSE,EPT,UG,VPID
root@freebsd:~ #
#+end_example

*** 2. Load the module
added following lines to /boot/loader.conf on FreeBSD host
#+begin_example
# needed for virtualization support
vmm_load="YES"
#+end_example

to load the kernel module without rebooting issue the following command
#+begin_example
root@freebsd:~ # kldload vmm
#+end_example


*** 3. Create bhyve directory structure

For ZFS
#+begin_example
zfs create zroot/bhyve
#+end_example

** Configure bhyve Networking
[[https://empt1e.blogspot.com/2016/10/bhyve-networking-options.html][Roma's Blog on bhyve Networking Options]]
*** NAT (Option 1)

Create single bridge and add a separate tap device for each Guest VMs:
#+begin_example
root@freebsd:~ # ifconfig bridge create name brnat up
brnat
root@freebsd:~ # ifconfig tap create up
tap0
root@freebsd:~ # ifconfig brnat addm tap0

root@freebsd:~ # ifconfig brnat inet 10.0.0.1/24
#+end_example

added to /etc/pf.conf
#+begin_example
virt_net="10.0.0.0/24"
set skip on brnat
nat on $ext_if from $virt_net to any -> ($ext_if)
#+end_example

Enable ip forwarding
#+begin_example
root@freebsd:~ # sysctl net.inet.ip.forwarding
net.inet.ip.forwarding: 1
root@freebsd:~ #
#+end_example

Assign ip to bridge
#+begin_example
root@freebsd:~ # ifconfig brnat inet 10.0.0.1/24
#+end_example

An IP can then be assigned to the Guest VM from the 10.0.0.0/24 network and the default gw set to 10.0.0.1.





*** Passthrough (Option 2)


[[https://wiki.freebsd.org/bhyve/pci_passthru][FreeBSD Wiki - bhyve PCI Passthrough]]

#+begin_example
root@freebsd:/zroot/bhyve # pciconf -lv vmx1
vmx1@pci0:19:0:0:       class=0x020000 rev=0x01 hdr=0x00 vendor=0x15ad device=0x07b0 subvendor=0x15ad subdevice=0x07b0
    vendor     = 'VMware'
    device     = 'VMXNET3 Ethernet Controller'
    class      = network
    subclass   = ethernet
root@freebsd:/zroot/bhyve #
#+end_example

add following to /boot/loader.conf and reboot
#+begin_example
pptdevs="19/0/0"
#+end_example

add to bhyve config
#+begin_example
bhyve -A -H -P \
-s 0:0,hostbridge \
-s 1:0,lpc \
-s 6,passthru,19/0/0 \
-s 3:0,virtio-blk,./linux.img \
-l com1,stdio \
-c 4 \
-m 2048M linux
#+end_example









** Create Guest VMs

*** Create ZFS volume or disk image

Create a ZFS volume
#+begin_example
# zfs create -V16G -o volmode=dev zroot/linuxdisk0
#+end_example

or a disk image with truncate
#+begin_example
root@freebsd:~ # truncate -s 16G linux.img
#+end_example


**** For UEFI based VMs (Option 1)

Install sysutils/bhyve-firmware

Create a per-guest-copy of the variables template file:
#+begin_example
# cp /usr/local/share/uefi-firmware/BHYVE_UEFI_VARS.fd /path/to/vm-image/BHYVE_UEFI_VARS.fd
#+end_example


Create a bhyve boot script:
#+begin_example
cat start-linux.sh
bhyve -AHP \
      -s 0:0,hostbridge \
      -s 1:0,lpc \
      -s 2:0,virtio-net,tap1 \
      -s 3:0,virtio-blk,/dev/zvol/zroot/rheldisc0 \
      -s 4:0,ahci-cd,./rhel-8.10-x86_64-dvd.iso \
      -c 4 \
      -m 2048M \
      -u \
      -s 29,fbuf,password="PASSWORDHERE",tcp=0.0.0.0:5900 \
      -s 30,xhci,tablet \
      -l bootrom,/usr/local/share/uefi-firmware/BHYVE_UEFI.fd,./BHYVE_UEFI_VARS.fd \
      rhel
#+end_example

Start the VM.

#+begin_example
# ./start-linux.sh
#+end_example


Stop the VM when needed:
#+begin_example
# cat ./destroy.sh
bhyvectl --destroy --vm=debian1
#+end_example




**** Booting with GRUB (Option 2)


Install sysutils/grub2-bhyve port.



Create a device.map that grub will use to map the virtual devices to the files on the host system:
#+begin_example
root@freebsd:/zroot/bhyve # cat device.map
(hd0) ./linux.img
(cd0) ./ubuntu-22.04.4-live-server-amd64.iso
root@freebsd:/zroot/bhyve #
#+end_example


1. Use sysutils/grub2-bhyve to load the Linux速 kernel from the ISO image:
#+begin_example
root@freebsd:/zroot/bhyve # grub-bhyve -m device.map -r cd0 -M 1024M linux
#+end_example

2. Now that the Linux速 kernel is loaded, the guest can be started:
#+begin_example
root@freebsd:/zroot/bhyve # bhyve -A -H -P \
    -s 0:0,hostbridge \
    -s 1:0,lpc \
    -s 2:0,virtio-net,tap0 \
    -s 3:0,virtio-blk,./linux.img \
    -s 4:0,ahci-cd,./ubuntu-22.04.4-live-server-amd64.iso \
    -l com1,stdio \
    -c 4 \
    -m 1024M linux
#+end_example

3. The system will boot and start the installer. After installing a system in the virtual machine, reboot the virtual machine. This will cause bhyve to exit. The instance of the virtual machine needs to be destroyed before it can be started again:


#+begin_example
root@freebsd:~ # bhyvectl --destroy --vm=linux
#+end_example

4 (a). Now the guest can be started directly from the virtual disk. Load the kernel:
#+begin_example
grub> ls
(hd0) (hd0,gpt3) (hd0,gpt2) (hd0,gpt1) (cd0) (cd0,gpt3) (cd0,gpt2) (cd0,gpt1) (host) (lvm/ubuntu--vg-ubuntu--lv)
grub> ls (hd0,gpt2)/
lost+found/ grub/ config-5.15.0-94-generic initrd.img.old vmlinuz.old System.map-5.15.0-94-generic vmlinuz-5.15.0-94-generic initrd.img
vmlinuz initrd.img-5.15.0-94-generic
grub> linux (hd0,gpt2)/vmlinuz-5.15.0-94-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv
grub> initrd (hd0,gpt2)/initrd.img-5.15.0-94-generic
grub> boot
#+end_example


4 (b). Boot the new system
#+begin_example
root@freebsd:/zroot/bhyve # cat boot.sh
bhyve -A -H -P \
    -s 0:0,hostbridge \
    -s 1:0,lpc \
    -s 2:0,virtio-net,tap0 \
    -s 3:0,virtio-blk,./linux.img \
    -l com1,stdio \
    -c 4 \
    -m 1024M \
    -u \
    linux
root@freebsd:/zroot/bhyve #
#+end_example

When finished reboot and destroy:
#+begin_example
guestvm# reboot
bhyvehost# bhyvectl --destroy --vm=debian
#+end_example


5. Create a start script which automatically loads the kernel (4 a.) and boots the VM (4 b.):
#+begin_example
#!/bin/sh

grub-bhyve -m device.map -r hd0,gpt2 -M 2048M linux < linux-grub.cfg > /dev/null

bhyve -A -H -P \
    -s 0:0,hostbridge \
    -s 1:0,lpc \
    -s 2:0,virtio-net,tap0 \
    -s 3:0,virtio-blk,./linux.img \
    -l com1,stdio \
    -c 8 \
    -m 2048M \
    -u \
    linux
#+end_example

device.map
#+begin_example
(hd0) ./linux.img
(cd0) ./ubuntu-22.04.4-live-server-amd64.iso
#+end_example

linux-grub.cfg
#+begin_example
linux (hd0,gpt2)/vmlinuz-5.15.0-122-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv
initrd (hd0,gpt2)/initrd.img-5.15.0-122-generic
boot
#+end_example


** Start VMs when FreeBSD Host boots

crontab
#+begin_example
root@freebsd:~ # crontab -l
@reboot /zroot/bhyve/linux-nat.sh
@reboot cd /zroot/bhyve/ubuntu; /usr/local/bin/tmux new-session -d -s "ubuntu" /zroot/bhyve/ubuntu/linux-start.sh
root@freebsd:~ #
#+end_example

/zroot/bhyve/linux-nat.sh
#+begin_example
root@freebsd:~ # cat /zroot/bhyve/linux-nat.sh
#!/bin/sh

ifconfig bridge create name brnat up
ifconfig tap create up
ifconfig tap create up
ifconfig brnat addm tap0
ifconfig brnat addm tap1
ifconfig brnat inet 10.0.0.1/24
root@freebsd:~ #
#+end_example



#+begin_export html
<hr>
#+end_export
